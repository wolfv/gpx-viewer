/* gpx.h generated by valac 0.28.1, the Vala compiler, do not modify */


#ifndef ____SRC_GPX_H__
#define ____SRC_GPX_H__

#include <glib.h>
#include <glib-object.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <gio/gio.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <gdk/gdk.h>
#include <champlain-gtk/champlain-gtk.h>
#include <champlain/champlain.h>

G_BEGIN_DECLS


#define GPX_TYPE_HEART_RATE_MONITOR_POINT (gpx_heart_rate_monitor_point_get_type ())
typedef struct _GpxHeartRateMonitorPoint GpxHeartRateMonitorPoint;

#define GPX_TYPE_HEART_RATE_MONITOR_TRACK (gpx_heart_rate_monitor_track_get_type ())
typedef struct _GpxHeartRateMonitorTrack GpxHeartRateMonitorTrack;

#define GPX_TYPE_POINT (gpx_point_get_type ())
#define GPX_POINT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_POINT, GpxPoint))
#define GPX_POINT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_POINT, GpxPointClass))
#define GPX_IS_POINT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_POINT))
#define GPX_IS_POINT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_POINT))
#define GPX_POINT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_POINT, GpxPointClass))

typedef struct _GpxPoint GpxPoint;
typedef struct _GpxPointClass GpxPointClass;
typedef struct _GpxPointPrivate GpxPointPrivate;

#define GPX_TYPE_TRACK (gpx_track_get_type ())
#define GPX_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_TRACK, GpxTrack))
#define GPX_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_TRACK, GpxTrackClass))
#define GPX_IS_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_TRACK))
#define GPX_IS_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_TRACK))
#define GPX_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_TRACK, GpxTrackClass))

typedef struct _GpxTrack GpxTrack;
typedef struct _GpxTrackClass GpxTrackClass;
typedef struct _GpxTrackPrivate GpxTrackPrivate;

#define GPX_TYPE_FILE_BASE (gpx_file_base_get_type ())
#define GPX_FILE_BASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_FILE_BASE, GpxFileBase))
#define GPX_FILE_BASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_FILE_BASE, GpxFileBaseClass))
#define GPX_IS_FILE_BASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_FILE_BASE))
#define GPX_IS_FILE_BASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_FILE_BASE))
#define GPX_FILE_BASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_FILE_BASE, GpxFileBaseClass))

typedef struct _GpxFileBase GpxFileBase;
typedef struct _GpxFileBaseClass GpxFileBaseClass;
typedef struct _GpxFileBasePrivate GpxFileBasePrivate;

#define GPX_TYPE_XML_FILE (gpx_xml_file_get_type ())
#define GPX_XML_FILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_XML_FILE, GpxXmlFile))
#define GPX_XML_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_XML_FILE, GpxXmlFileClass))
#define GPX_IS_XML_FILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_XML_FILE))
#define GPX_IS_XML_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_XML_FILE))
#define GPX_XML_FILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_XML_FILE, GpxXmlFileClass))

typedef struct _GpxXmlFile GpxXmlFile;
typedef struct _GpxXmlFileClass GpxXmlFileClass;
typedef struct _GpxXmlFilePrivate GpxXmlFilePrivate;

#define GPX_TYPE_FIT_FILE (gpx_fit_file_get_type ())
#define GPX_FIT_FILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_FIT_FILE, GpxFitFile))
#define GPX_FIT_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_FIT_FILE, GpxFitFileClass))
#define GPX_IS_FIT_FILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_FIT_FILE))
#define GPX_IS_FIT_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_FIT_FILE))
#define GPX_FIT_FILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_FIT_FILE, GpxFitFileClass))

typedef struct _GpxFitFile GpxFitFile;
typedef struct _GpxFitFileClass GpxFitFileClass;
typedef struct _GpxFitFilePrivate GpxFitFilePrivate;

#define GPX_TYPE_2D_POINT (gpx_2d_point_get_type ())
typedef struct _Gpx2DPoint Gpx2DPoint;

#define GPX_TYPE_GRAPH_SIZES_T (gpx_graph_sizes_t_get_type ())
typedef struct _Gpxgraph_sizes_t Gpxgraph_sizes_t;

#define GPX_TYPE_GRAPH2_VIEW (gpx_graph2_view_get_type ())
#define GPX_GRAPH2_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_GRAPH2_VIEW, GpxGraph2View))
#define GPX_GRAPH2_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_GRAPH2_VIEW, GpxGraph2ViewClass))
#define GPX_IS_GRAPH2_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_GRAPH2_VIEW))
#define GPX_IS_GRAPH2_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_GRAPH2_VIEW))
#define GPX_GRAPH2_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_GRAPH2_VIEW, GpxGraph2ViewClass))

typedef struct _GpxGraph2View GpxGraph2View;
typedef struct _GpxGraph2ViewClass GpxGraph2ViewClass;
typedef struct _GpxGraph2ViewPrivate GpxGraph2ViewPrivate;

#define GPX_GRAPH2_VIEW_TYPE_DATA (gpx_graph2_view_data_get_type ())
#define GPX_GRAPH2_VIEW_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_GRAPH2_VIEW_TYPE_DATA, GpxGraph2ViewData))
#define GPX_GRAPH2_VIEW_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_GRAPH2_VIEW_TYPE_DATA, GpxGraph2ViewDataClass))
#define GPX_GRAPH2_VIEW_IS_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_GRAPH2_VIEW_TYPE_DATA))
#define GPX_GRAPH2_VIEW_IS_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_GRAPH2_VIEW_TYPE_DATA))
#define GPX_GRAPH2_VIEW_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_GRAPH2_VIEW_TYPE_DATA, GpxGraph2ViewDataClass))

typedef struct _GpxGraph2ViewData GpxGraph2ViewData;
typedef struct _GpxGraph2ViewDataClass GpxGraph2ViewDataClass;
typedef struct _GpxGraph2ViewDataPrivate GpxGraph2ViewDataPrivate;

#define GPX_GRAPH2_VIEW_DATA_TYPE_STYLE_T (gpx_graph2_view_data_style_t_get_type ())
typedef struct _GpxGraph2ViewDatastyle_t GpxGraph2ViewDatastyle_t;

#define GPX_TYPE_GRAPH (gpx_graph_get_type ())
#define GPX_GRAPH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_GRAPH, GpxGraph))
#define GPX_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_GRAPH, GpxGraphClass))
#define GPX_IS_GRAPH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_GRAPH))
#define GPX_IS_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_GRAPH))
#define GPX_GRAPH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_GRAPH, GpxGraphClass))

typedef struct _GpxGraph GpxGraph;
typedef struct _GpxGraphClass GpxGraphClass;
typedef struct _GpxGraphPrivate GpxGraphPrivate;

#define GPX_TYPE_PLAYBACK (gpx_playback_get_type ())
#define GPX_PLAYBACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_PLAYBACK, GpxPlayback))
#define GPX_PLAYBACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_PLAYBACK, GpxPlaybackClass))
#define GPX_IS_PLAYBACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_PLAYBACK))
#define GPX_IS_PLAYBACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_PLAYBACK))
#define GPX_PLAYBACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_PLAYBACK, GpxPlaybackClass))

typedef struct _GpxPlayback GpxPlayback;
typedef struct _GpxPlaybackClass GpxPlaybackClass;
typedef struct _GpxPlaybackPrivate GpxPlaybackPrivate;

#define GPX_PLAYBACK_TYPE_STATE (gpx_playback_state_get_type ())

#define GPX_TYPE_TRACK_TREE_MODEL (gpx_track_tree_model_get_type ())
#define GPX_TRACK_TREE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_TYPE_TRACK_TREE_MODEL, GpxTrackTreeModel))
#define GPX_TRACK_TREE_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_TYPE_TRACK_TREE_MODEL, GpxTrackTreeModelClass))
#define GPX_IS_TRACK_TREE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_TYPE_TRACK_TREE_MODEL))
#define GPX_IS_TRACK_TREE_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_TYPE_TRACK_TREE_MODEL))
#define GPX_TRACK_TREE_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_TYPE_TRACK_TREE_MODEL, GpxTrackTreeModelClass))

typedef struct _GpxTrackTreeModel GpxTrackTreeModel;
typedef struct _GpxTrackTreeModelClass GpxTrackTreeModelClass;
typedef struct _GpxTrackTreeModelPrivate GpxTrackTreeModelPrivate;

#define GPX_TRACK_TREE_MODEL_TYPE_COLUMN (gpx_track_tree_model_column_get_type ())

#define GPX_VIEWER_TYPE_SETTINGS (gpx_viewer_settings_get_type ())
#define GPX_VIEWER_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_VIEWER_TYPE_SETTINGS, GpxViewerSettings))
#define GPX_VIEWER_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_VIEWER_TYPE_SETTINGS, GpxViewerSettingsClass))
#define GPX_VIEWER_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_VIEWER_TYPE_SETTINGS))
#define GPX_VIEWER_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_VIEWER_TYPE_SETTINGS))
#define GPX_VIEWER_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_VIEWER_TYPE_SETTINGS, GpxViewerSettingsClass))

typedef struct _GpxViewerSettings GpxViewerSettings;
typedef struct _GpxViewerSettingsClass GpxViewerSettingsClass;
typedef struct _GpxViewerSettingsPrivate GpxViewerSettingsPrivate;

#define GPX_VIEWER_TYPE_MAP_VIEW (gpx_viewer_map_view_get_type ())
#define GPX_VIEWER_MAP_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GPX_VIEWER_TYPE_MAP_VIEW, GpxViewerMapView))
#define GPX_VIEWER_MAP_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GPX_VIEWER_TYPE_MAP_VIEW, GpxViewerMapViewClass))
#define GPX_VIEWER_IS_MAP_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GPX_VIEWER_TYPE_MAP_VIEW))
#define GPX_VIEWER_IS_MAP_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GPX_VIEWER_TYPE_MAP_VIEW))
#define GPX_VIEWER_MAP_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GPX_VIEWER_TYPE_MAP_VIEW, GpxViewerMapViewClass))

typedef struct _GpxViewerMapView GpxViewerMapView;
typedef struct _GpxViewerMapViewClass GpxViewerMapViewClass;
typedef struct _GpxViewerMapViewPrivate GpxViewerMapViewPrivate;

struct _GpxHeartRateMonitorPoint {
	gint heartrate;
};

struct _GpxHeartRateMonitorTrack {
	guint32 calories;
};

struct _GpxPoint {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GpxPointPrivate * priv;
	gdouble lat;
	gdouble lon;
	gdouble lat_dec;
	gdouble lon_dec;
	gdouble distance;
	gdouble elevation;
	gdouble smooth_elevation;
	gchar* time;
	gdouble speed;
	gboolean stopped;
	guint32 cadence;
	GpxHeartRateMonitorPoint tpe;
};

struct _GpxPointClass {
	GTypeClass parent_class;
	void (*finalize) (GpxPoint *self);
};

struct _GpxTrack {
	GObject parent_instance;
	GpxTrackPrivate * priv;
	GpxHeartRateMonitorTrack hrmt;
	gint filtered_points;
	gdouble total_distance;
	gdouble max_speed;
	gdouble max_elevation;
	gdouble min_elevation;
	GList* points;
	GpxPoint* top;
	GpxPoint* bottom;
};

struct _GpxTrackClass {
	GObjectClass parent_class;
};

typedef enum  {
	GPX_FILE_ERROR_INVALID_FILE,
	GPX_FILE_ERROR_IO_ERROR
} GpxFileError;
#define GPX_FILE_ERROR gpx_file_error_quark ()
struct _GpxFileBase {
	GObject parent_instance;
	GpxFileBasePrivate * priv;
	GList* tracks;
	GList* waypoints;
	GList* routes;
	GFile* file;
};

struct _GpxFileBaseClass {
	GObjectClass parent_class;
};

struct _GpxXmlFile {
	GpxFileBase parent_instance;
	GpxXmlFilePrivate * priv;
};

struct _GpxXmlFileClass {
	GpxFileBaseClass parent_class;
};

struct _GpxFitFile {
	GpxFileBase parent_instance;
	GpxFitFilePrivate * priv;
};

struct _GpxFitFileClass {
	GpxFileBaseClass parent_class;
};

struct _Gpx2DPoint {
	gdouble x;
	gdouble y;
};

struct _Gpxgraph_sizes_t {
	gdouble alloc_width;
	gdouble alloc_height;
	gdouble graph_width;
	gdouble graph_height;
	gdouble start_x;
	gdouble end_x;
	gdouble start_y;
	gdouble end_y;
};

struct _GpxGraph2View {
	GtkEventBox parent_instance;
	GpxGraph2ViewPrivate * priv;
	GeeArrayList* _data;
};

struct _GpxGraph2ViewClass {
	GtkEventBoxClass parent_class;
};

struct _GpxGraph2ViewDatastyle_t {
	GdkRGBA color;
	GdkRGBA* fill;
	gdouble line_width;
};

struct _GpxGraph2ViewData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GpxGraph2ViewDataPrivate * priv;
	GeeArrayList* points;
	Gpx2DPoint max;
	Gpx2DPoint min;
	gint axis_position;
	GpxGraph2ViewDatastyle_t style;
};

struct _GpxGraph2ViewDataClass {
	GTypeClass parent_class;
	void (*finalize) (GpxGraph2ViewData *self);
};

struct _GpxGraph {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GpxGraphPrivate * priv;
	GpxTrack* track;
};

struct _GpxGraphClass {
	GTypeClass parent_class;
	void (*finalize) (GpxGraph *self);
};

struct _GpxPlayback {
	GObject parent_instance;
	GpxPlaybackPrivate * priv;
};

struct _GpxPlaybackClass {
	GObjectClass parent_class;
};

typedef enum  {
	GPX_PLAYBACK_STATE_STOPPED,
	GPX_PLAYBACK_STATE_PAUSED,
	GPX_PLAYBACK_STATE_PLAY
} GpxPlaybackState;

struct _GpxTrackTreeModel {
	GObject parent_instance;
	GpxTrackTreeModelPrivate * priv;
};

struct _GpxTrackTreeModelClass {
	GObjectClass parent_class;
};

typedef enum  {
	GPX_TRACK_TREE_MODEL_COLUMN_TIME,
	GPX_TRACK_TREE_MODEL_COLUMN_DISTANCE,
	GPX_TRACK_TREE_MODEL_COLUMN_ELEVATION,
	GPX_TRACK_TREE_MODEL_COLUMN_SPEED,
	GPX_TRACK_TREE_MODEL_COLUMN_NUM_COLUMNS
} GpxTrackTreeModelColumn;

struct _GpxViewerSettings {
	GObject parent_instance;
	GpxViewerSettingsPrivate * priv;
};

struct _GpxViewerSettingsClass {
	GObjectClass parent_class;
};

struct _GpxViewerMapView {
	GtkChamplainEmbed parent_instance;
	GpxViewerMapViewPrivate * priv;
};

struct _GpxViewerMapViewClass {
	GtkChamplainEmbedClass parent_class;
};


GType gpx_heart_rate_monitor_point_get_type (void) G_GNUC_CONST;
GpxHeartRateMonitorPoint* gpx_heart_rate_monitor_point_dup (const GpxHeartRateMonitorPoint* self);
void gpx_heart_rate_monitor_point_free (GpxHeartRateMonitorPoint* self);
GType gpx_heart_rate_monitor_track_get_type (void) G_GNUC_CONST;
GpxHeartRateMonitorTrack* gpx_heart_rate_monitor_track_dup (const GpxHeartRateMonitorTrack* self);
void gpx_heart_rate_monitor_track_free (GpxHeartRateMonitorTrack* self);
gpointer gpx_point_ref (gpointer instance);
void gpx_point_unref (gpointer instance);
GParamSpec* gpx_param_spec_point (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void gpx_value_set_point (GValue* value, gpointer v_object);
void gpx_value_take_point (GValue* value, gpointer v_object);
gpointer gpx_value_get_point (const GValue* value);
GType gpx_point_get_type (void) G_GNUC_CONST;
gboolean gpx_point_has_position (GpxPoint* self);
GpxPoint* gpx_point_copy (GpxPoint* self);
void gpx_point_set_position_lat (GpxPoint* self, gdouble lat_d);
void gpx_point_set_position_lon (GpxPoint* self, gdouble lon_d);
void gpx_point_set_position (GpxPoint* self, gdouble lat, gdouble lon);
time_t gpx_point_get_time (GpxPoint* self);
GpxPoint* gpx_point_new (void);
GpxPoint* gpx_point_construct (GType object_type);
const gchar* gpx_point_get_name (GpxPoint* self);
void gpx_point_set_name (GpxPoint* self, const gchar* value);
GType gpx_track_get_type (void) G_GNUC_CONST;
GpxPoint* gpx_track_get_last (GpxTrack* self);
void gpx_track_filter_points (GpxTrack* self);
void gpx_track_recalculate (GpxTrack* self);
void gpx_track_add_point (GpxTrack* self, GpxPoint* point);
GpxTrack* gpx_track_cleanup_speed (GpxTrack* self);
gdouble gpx_track_get_track_average (GpxTrack* self);
gdouble gpx_track_calculate_point_to_point_speed (GpxTrack* self, GpxPoint* a, GpxPoint* b);
time_t gpx_track_get_total_time (GpxTrack* self);
gdouble gpx_track_calculate_moving_average (GpxTrack* self, GpxPoint* start, GpxPoint* stop, time_t* moving_time);
void gpx_track_calculate_total_elevation (GpxTrack* self, GpxPoint* start, GpxPoint* stop, gdouble* up, gdouble* down);
gdouble gpx_track_calculate_distance_coords (gdouble lon_a, gdouble lat_a, gdouble lon_b, gdouble lat_b);
gdouble gpx_track_calculate_distance (GpxPoint* a, GpxPoint* b);
guint gpx_track_heartrate_avg (GpxTrack* self, GpxPoint* start, GpxPoint* stop);
guint gpx_track_get_burned_calories (GpxTrack* self);
void gpx_track_set_burned_calories (GpxTrack* self, guint value);
GpxTrack* gpx_track_new (void);
GpxTrack* gpx_track_construct (GType object_type);
const gchar* gpx_track_get_name (GpxTrack* self);
void gpx_track_set_name (GpxTrack* self, const gchar* value);
GQuark gpx_file_error_quark (void);
GType gpx_file_base_get_type (void) G_GNUC_CONST;
gchar* gpx_file_base_get_uri (GpxFileBase* self);
gchar* gpx_file_base_get_basename (GpxFileBase* self);
GList* gpx_file_base_get_tracks (GpxFileBase* self);
GList* gpx_file_base_get_waypoints (GpxFileBase* self);
GList* gpx_file_base_get_routes (GpxFileBase* self);
GpxFileBase* gpx_file_base_construct (GType object_type);
GpxFileBase* gpx_file_open (GFile* path, GError** error);
GType gpx_xml_file_get_type (void) G_GNUC_CONST;
GpxXmlFile* gpx_xml_file_new (GFile* file);
GpxXmlFile* gpx_xml_file_construct (GType object_type, GFile* file);
GType gpx_fit_file_get_type (void) G_GNUC_CONST;
GpxFitFile* gpx_fit_file_new (GFile* file, GError** error);
GpxFitFile* gpx_fit_file_construct (GType object_type, GFile* file, GError** error);
GType gpx_2d_point_get_type (void) G_GNUC_CONST;
Gpx2DPoint* gpx_2d_point_dup (const Gpx2DPoint* self);
void gpx_2d_point_free (Gpx2DPoint* self);
GType gpx_graph_sizes_t_get_type (void) G_GNUC_CONST;
Gpxgraph_sizes_t* gpx_graph_sizes_t_dup (const Gpxgraph_sizes_t* self);
void gpx_graph_sizes_t_free (Gpxgraph_sizes_t* self);
GType gpx_graph2_view_get_type (void) G_GNUC_CONST;
gpointer gpx_graph2_view_data_ref (gpointer instance);
void gpx_graph2_view_data_unref (gpointer instance);
GParamSpec* gpx_graph2_view_param_spec_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void gpx_graph2_view_value_set_data (GValue* value, gpointer v_object);
void gpx_graph2_view_value_take_data (GValue* value, gpointer v_object);
gpointer gpx_graph2_view_value_get_data (const GValue* value);
GType gpx_graph2_view_data_get_type (void) G_GNUC_CONST;
gboolean gpx_graph2_view_add_data (GpxGraph2View* self, GeeArrayList* data, gint axis_position, GdkRGBA* color, GdkRGBA* fill);
void gpx_graph2_view_plot (GpxGraph2View* self);
GpxGraph2View* gpx_graph2_view_new (void);
GpxGraph2View* gpx_graph2_view_construct (GType object_type);
GType gpx_graph2_view_data_style_t_get_type (void) G_GNUC_CONST;
GpxGraph2ViewDatastyle_t* gpx_graph2_view_data_style_t_dup (const GpxGraph2ViewDatastyle_t* self);
void gpx_graph2_view_data_style_t_free (GpxGraph2ViewDatastyle_t* self);
void gpx_graph2_view_data_style_t_copy (const GpxGraph2ViewDatastyle_t* self, GpxGraph2ViewDatastyle_t* dest);
void gpx_graph2_view_data_style_t_destroy (GpxGraph2ViewDatastyle_t* self);
GpxGraph2ViewData* gpx_graph2_view_data_new (GeeArrayList* data, gint axis_position, GdkRGBA* color, GdkRGBA* fill);
GpxGraph2ViewData* gpx_graph2_view_data_construct (GType object_type, GeeArrayList* data, gint axis_position, GdkRGBA* color, GdkRGBA* fill);
gpointer gpx_graph_ref (gpointer instance);
void gpx_graph_unref (gpointer instance);
GParamSpec* gpx_param_spec_graph (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void gpx_value_set_graph (GValue* value, gpointer v_object);
void gpx_value_take_graph (GValue* value, gpointer v_object);
gpointer gpx_value_get_graph (const GValue* value);
GType gpx_graph_get_type (void) G_GNUC_CONST;
void gpx_graph_set_track (GpxGraph* self, GpxTrack* track);
void gpx_graph_add_graph_to_container (GpxGraph* self, GtkContainer* container);
void gpx_graph_highlight_point (GpxGraph* self, GpxPoint* p);
void gpx_graph_set_highlight (GpxGraph* self, time_t highlight);
void gpx_graph_hide_info (GpxGraph* self);
void gpx_graph_show_info (GpxGraph* self, GpxPoint* cur_point);
GpxGraph* gpx_graph_new (void);
GpxGraph* gpx_graph_construct (GType object_type);
gint gpx_graph_get_smooth_factor (GpxGraph* self);
void gpx_graph_set_smooth_factor (GpxGraph* self, gint value);
gboolean gpx_graph_get_show_points (GpxGraph* self);
void gpx_graph_set_show_points (GpxGraph* self, gboolean value);
GType gpx_playback_get_type (void) G_GNUC_CONST;
GType gpx_playback_state_get_type (void) G_GNUC_CONST;
void gpx_playback_set_track (GpxPlayback* self, GpxTrack* track);
GpxPlayback* gpx_playback_new (GpxTrack* track);
GpxPlayback* gpx_playback_construct (GType object_type, GpxTrack* track);
gboolean gpx_playback_timer_callback (GpxPlayback* self);
void gpx_playback_start (GpxPlayback* self);
void gpx_playback_pause (GpxPlayback* self);
void gpx_playback_stop (GpxPlayback* self);
gint gpx_playback_get_speedup (GpxPlayback* self);
void gpx_playback_set_speedup (GpxPlayback* self, gint value);
GType gpx_track_tree_model_get_type (void) G_GNUC_CONST;
GType gpx_track_tree_model_column_get_type (void) G_GNUC_CONST;
GpxTrackTreeModel* gpx_track_tree_model_new (GpxTrack* track);
GpxTrackTreeModel* gpx_track_tree_model_construct (GType object_type, GpxTrack* track);
GType gpx_viewer_settings_get_type (void) G_GNUC_CONST;
extern GType gpx_viewer_settings_enum_type;
GpxViewerSettings* gpx_viewer_settings_new (void);
GpxViewerSettings* gpx_viewer_settings_construct (GType object_type);
void gpx_viewer_settings_add_object_property (GpxViewerSettings* self, GObject* wobject, const gchar* property);
gint gpx_viewer_settings_get_integer (GpxViewerSettings* self, const gchar* class, const gchar* name, gint def);
gchar* gpx_viewer_settings_get_string (GpxViewerSettings* self, const gchar* class, const gchar* name, const gchar* def);
void gpx_viewer_settings_set_integer (GpxViewerSettings* self, const gchar* class, const gchar* name, gint val);
void gpx_viewer_settings_set_string (GpxViewerSettings* self, const gchar* class, const gchar* name, const gchar* val);
gdouble gpx_viewer_settings_get_double (GpxViewerSettings* self, const gchar* class, const gchar* name, gdouble def);
gboolean gpx_viewer_settings_get_boolean (GpxViewerSettings* self, const gchar* class, const gchar* name, gboolean def);
GType gpx_viewer_map_view_get_type (void) G_GNUC_CONST;
ChamplainMarker* gpx_viewer_map_view_create_marker (GpxViewerMapView* self, GpxPoint* p, const gchar* icon, gint size);
void gpx_viewer_map_view_click_marker_show (GpxViewerMapView* self, GpxPoint* p);
void gpx_viewer_map_view_click_marker_hide (GpxViewerMapView* self);
void gpx_viewer_map_view_add_waypoint (GpxViewerMapView* self, GpxPoint* p);
void gpx_viewer_map_view_add_marker (GpxViewerMapView* self, ChamplainMarker* marker);
GtkTreeModel* gpx_viewer_map_view_get_model (GpxViewerMapView* self);
GpxViewerMapView* gpx_viewer_map_view_new (void);
GpxViewerMapView* gpx_viewer_map_view_construct (GType object_type);
gboolean gpx_viewer_map_view_get_show_waypoints (GpxViewerMapView* self);
void gpx_viewer_map_view_set_show_waypoints (GpxViewerMapView* self, gboolean value);
gboolean gpx_viewer_map_view_get_show_markers (GpxViewerMapView* self);
void gpx_viewer_map_view_set_show_markers (GpxViewerMapView* self, gboolean value);
const gchar* gpx_viewer_map_view_get_map_source (GpxViewerMapView* self);
void gpx_viewer_map_view_set_map_source (GpxViewerMapView* self, const gchar* value);


G_END_DECLS

#endif
